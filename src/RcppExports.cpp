// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gcusum
NumericMatrix gcusum(NumericMatrix& input_outcomes, double failure_prob, double delta, double control_limit, int max_num_shuffles, int seed, NumericVector& quantiles);
RcppExport SEXP _cusum_gcusum(SEXP input_outcomesSEXP, SEXP failure_probSEXP, SEXP deltaSEXP, SEXP control_limitSEXP, SEXP max_num_shufflesSEXP, SEXP seedSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type input_outcomes(input_outcomesSEXP);
    Rcpp::traits::input_parameter< double >::type failure_prob(failure_probSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type control_limit(control_limitSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_shuffles(max_num_shufflesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(gcusum(input_outcomes, failure_prob, delta, control_limit, max_num_shuffles, seed, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// ragcusum
NumericMatrix ragcusum(NumericMatrix& input_ra_outcomes, double control_limit, int max_num_shuffles, int seed, NumericVector& quantiles);
RcppExport SEXP _cusum_ragcusum(SEXP input_ra_outcomesSEXP, SEXP control_limitSEXP, SEXP max_num_shufflesSEXP, SEXP seedSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type input_ra_outcomes(input_ra_outcomesSEXP);
    Rcpp::traits::input_parameter< double >::type control_limit(control_limitSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_shuffles(max_num_shufflesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(ragcusum(input_ra_outcomes, control_limit, max_num_shuffles, seed, quantiles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cusum_gcusum", (DL_FUNC) &_cusum_gcusum, 7},
    {"_cusum_ragcusum", (DL_FUNC) &_cusum_ragcusum, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_cusum(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
